
@using Microsoft.AspNet.Identity;
@model CapStoneCraftxProject.Models.Trade

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
   
<div class="form-horizontal">
    <h4>Trade</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model =>model.SendingMemberId)
    @Html.HiddenFor(model =>model.ReceivingMemberId)
    @Html.HiddenFor(model=>model.ReceiverBeerId)

    <div class="form-group">
        @Html.LabelFor(model => model.SendingMemberId, "Member offering trade" +
       "", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DisplayFor(model => model.Cellar1.CellarName)
            @Html.ValidationMessageFor(model => model.SendingMemberId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ReceivingMemberId, "Member recieving trade", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DisplayFor(model => model.Cellar.CellarName)
            @Html.ValidationMessageFor(model => model.ReceivingMemberId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SendingBeerId, "Beer offered", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @if (Model.Cellar1.MemberId == User.Identity.GetUserId() && !Model.IsApproved.HasValue)
            {
                @: @Html.DropDownList("SendingBeerId", null, htmlAttributes: new { @class = "form-control", })
            }
            else
            {
                <text>

                    @Html.HiddenFor(model => model.SendingBeerId)
                    @Html.DisplayFor(model => model.Beer1.BeerName) (@Html.DisplayFor(model => model.Beer1.Brewer))

                </text>
            }

            @Html.ValidationMessageFor(model => model.SendingBeerId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ReceiverBeerId, "Requested beer", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DisplayFor(model =>model.Beer.BeerName) (@Html.DisplayFor(model =>model.Beer.Brewer))
            @Html.ValidationMessageFor(model => model.ReceiverBeerId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.tradesstatus, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @if (Model.Cellar.MemberId == User.Identity.GetUserId())
                {
                    @*@: @Html.EditorFor(model => model.IsApproved)*@
                    @: @Html.DropDownListFor(model => model.IsApproved,(SelectList)ViewBag.BoolValues,"Pending",null)
                }
                else
                {
                    <text>
                        @Html.HiddenFor(model => model.IsApproved)
                        @Html.DisplayFor(model => model.tradesstatus)
                    </text>
                }

                @Html.ValidationMessageFor(model => model.IsApproved, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SendingComments, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @if (Model.Cellar1.MemberId == User.Identity.GetUserId() && !Model.IsApproved.HasValue)
            {

                @: @Html.TextAreaFor(model => model.SendingComments,new { @class = "form-control" })
            }
            else
            {
                <text>

                    @Html.HiddenFor(model => model.SendingComments)
            <div class="commentdisplay">

                @Html.DisplayFor(model => model.SendingComments) 
            </div>
                   

                </text>
            }

            @Html.ValidationMessageFor(model => model.SendingComments, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ReceivingComments, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @if (Model.Cellar.MemberId == User.Identity.GetUserId() && !Model.IsApproved.HasValue)
            {

                @: @Html.TextAreaFor(model => model.ReceivingComments, new { @class = "form-control" } )
            }
             else
            {
        <text>

                @Html.HiddenFor(model => model.ReceivingComments)

        <div class="commentdisplay">
                @Html.DisplayFor(model => model.ReceivingComments)
        </div>


        </text>

            }

            @Html.ValidationMessageFor(model => model.ReceivingComments, "", new { @class = "text-danger" })
        </div>

    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
